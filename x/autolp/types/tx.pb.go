// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: maany/autolp/v1/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	types2 "github.com/cosmos/cosmos-sdk/codec/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	types1 "github.com/cosmos/ibc-go/v8/modules/core/04-channel/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgCreateAutoLP struct {
	// Controller chain signer.
	FromAddress string `protobuf:"bytes,1,opt,name=from_address,json=fromAddress,proto3" json:"from_address,omitempty"`
	// IBC connection to the DEX chain.
	ConnectionId string `protobuf:"bytes,2,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"`
	// Local identifier for the interchain account owned by from_address.
	InterchainAccountId string `protobuf:"bytes,3,opt,name=interchain_account_id,json=interchainAccountId,proto3" json:"interchain_account_id,omitempty"`
	// ICS-20 channel on the controller chain to reach the DEX.
	TransferChannel string `protobuf:"bytes,4,opt,name=transfer_channel,json=transferChannel,proto3" json:"transfer_channel,omitempty"`
	// Amount to send to the ICA address on the DEX.
	Amount types.Coin `protobuf:"bytes,5,opt,name=amount,proto3" json:"amount"`
	// Timeout in seconds for the ICS-20 transfer.
	TimeoutSeconds uint64 `protobuf:"varint,6,opt,name=timeout_seconds,json=timeoutSeconds,proto3" json:"timeout_seconds,omitempty"`
}

func (m *MsgCreateAutoLP) Reset()         { *m = MsgCreateAutoLP{} }
func (m *MsgCreateAutoLP) String() string { return proto.CompactTextString(m) }
func (*MsgCreateAutoLP) ProtoMessage()    {}
func (*MsgCreateAutoLP) Descriptor() ([]byte, []int) {
	return fileDescriptor_f8eff3e612e6fd8e, []int{0}
}
func (m *MsgCreateAutoLP) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateAutoLP) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateAutoLP.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateAutoLP) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateAutoLP.Merge(m, src)
}
func (m *MsgCreateAutoLP) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateAutoLP) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateAutoLP.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateAutoLP proto.InternalMessageInfo

type MsgCreateAutoLPResponse struct {
	// The resolved ICA address on the DEX chain.
	IcaAddress string `protobuf:"bytes,1,opt,name=ica_address,json=icaAddress,proto3" json:"ica_address,omitempty"`
	// Outgoing packet sequence on the transfer channel.
	SequenceId uint64 `protobuf:"varint,2,opt,name=sequence_id,json=sequenceId,proto3" json:"sequence_id,omitempty"`
	// Transfer channel used on controller side.
	Channel string `protobuf:"bytes,3,opt,name=channel,proto3" json:"channel,omitempty"`
}

func (m *MsgCreateAutoLPResponse) Reset()         { *m = MsgCreateAutoLPResponse{} }
func (m *MsgCreateAutoLPResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateAutoLPResponse) ProtoMessage()    {}
func (*MsgCreateAutoLPResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f8eff3e612e6fd8e, []int{1}
}
func (m *MsgCreateAutoLPResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateAutoLPResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateAutoLPResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateAutoLPResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateAutoLPResponse.Merge(m, src)
}
func (m *MsgCreateAutoLPResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateAutoLPResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateAutoLPResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateAutoLPResponse proto.InternalMessageInfo

func (m *MsgCreateAutoLPResponse) GetIcaAddress() string {
	if m != nil {
		return m.IcaAddress
	}
	return ""
}

func (m *MsgCreateAutoLPResponse) GetSequenceId() uint64 {
	if m != nil {
		return m.SequenceId
	}
	return 0
}

func (m *MsgCreateAutoLPResponse) GetChannel() string {
	if m != nil {
		return m.Channel
	}
	return ""
}

// MsgRegisterICA registers an interchain account over an existing IBC connection.
type MsgRegisterICA struct {
	// Authority that controls autolp ICA logic (e.g. gov/admin module address).
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// IBC connection ID to the DEX chain.
	ConnectionId string `protobuf:"bytes,2,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"`
	// Local identifier for this ICA within autolp.
	InterchainAccountId string `protobuf:"bytes,3,opt,name=interchain_account_id,json=interchainAccountId,proto3" json:"interchain_account_id,omitempty"`
	// ORDERED/UNORDERED (ORDERED is standard for ICA).
	Ordering types1.Order `protobuf:"varint,4,opt,name=ordering,proto3,enum=ibc.core.channel.v1.Order" json:"ordering,omitempty"`
}

func (m *MsgRegisterICA) Reset()         { *m = MsgRegisterICA{} }
func (m *MsgRegisterICA) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterICA) ProtoMessage()    {}
func (*MsgRegisterICA) Descriptor() ([]byte, []int) {
	return fileDescriptor_f8eff3e612e6fd8e, []int{2}
}
func (m *MsgRegisterICA) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterICA) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterICA.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterICA) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterICA.Merge(m, src)
}
func (m *MsgRegisterICA) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterICA) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterICA.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterICA proto.InternalMessageInfo

type MsgRegisterICAResponse struct {
	ChannelId string `protobuf:"bytes,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	PortId    string `protobuf:"bytes,2,opt,name=port_id,json=portId,proto3" json:"port_id,omitempty"`
}

func (m *MsgRegisterICAResponse) Reset()         { *m = MsgRegisterICAResponse{} }
func (m *MsgRegisterICAResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterICAResponse) ProtoMessage()    {}
func (*MsgRegisterICAResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f8eff3e612e6fd8e, []int{3}
}
func (m *MsgRegisterICAResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterICAResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterICAResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterICAResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterICAResponse.Merge(m, src)
}
func (m *MsgRegisterICAResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterICAResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterICAResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterICAResponse proto.InternalMessageInfo

func (m *MsgRegisterICAResponse) GetChannelId() string {
	if m != nil {
		return m.ChannelId
	}
	return ""
}

func (m *MsgRegisterICAResponse) GetPortId() string {
	if m != nil {
		return m.PortId
	}
	return ""
}

// MsgSubmitICATx submits one or more messages for the ICA to execute on host chain.
type MsgSubmitICATx struct {
	Authority           string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	ConnectionId        string `protobuf:"bytes,2,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"`
	InterchainAccountId string `protobuf:"bytes,3,opt,name=interchain_account_id,json=interchainAccountId,proto3" json:"interchain_account_id,omitempty"`
	// Any-encoded host chain messages (e.g., Osmosis gamm messages).
	Msgs           []*types2.Any `protobuf:"bytes,4,rep,name=msgs,proto3" json:"msgs,omitempty"`
	Memo           string        `protobuf:"bytes,5,opt,name=memo,proto3" json:"memo,omitempty"`
	TimeoutSeconds uint64        `protobuf:"varint,6,opt,name=timeout_seconds,json=timeoutSeconds,proto3" json:"timeout_seconds,omitempty"`
}

func (m *MsgSubmitICATx) Reset()         { *m = MsgSubmitICATx{} }
func (m *MsgSubmitICATx) String() string { return proto.CompactTextString(m) }
func (*MsgSubmitICATx) ProtoMessage()    {}
func (*MsgSubmitICATx) Descriptor() ([]byte, []int) {
	return fileDescriptor_f8eff3e612e6fd8e, []int{4}
}
func (m *MsgSubmitICATx) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSubmitICATx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSubmitICATx.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSubmitICATx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSubmitICATx.Merge(m, src)
}
func (m *MsgSubmitICATx) XXX_Size() int {
	return m.Size()
}
func (m *MsgSubmitICATx) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSubmitICATx.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSubmitICATx proto.InternalMessageInfo

type MsgSubmitICATxResponse struct {
	SequenceId uint64 `protobuf:"varint,1,opt,name=sequence_id,json=sequenceId,proto3" json:"sequence_id,omitempty"`
	Channel    string `protobuf:"bytes,2,opt,name=channel,proto3" json:"channel,omitempty"`
}

func (m *MsgSubmitICATxResponse) Reset()         { *m = MsgSubmitICATxResponse{} }
func (m *MsgSubmitICATxResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSubmitICATxResponse) ProtoMessage()    {}
func (*MsgSubmitICATxResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f8eff3e612e6fd8e, []int{5}
}
func (m *MsgSubmitICATxResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSubmitICATxResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSubmitICATxResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSubmitICATxResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSubmitICATxResponse.Merge(m, src)
}
func (m *MsgSubmitICATxResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSubmitICATxResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSubmitICATxResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSubmitICATxResponse proto.InternalMessageInfo

func (m *MsgSubmitICATxResponse) GetSequenceId() uint64 {
	if m != nil {
		return m.SequenceId
	}
	return 0
}

func (m *MsgSubmitICATxResponse) GetChannel() string {
	if m != nil {
		return m.Channel
	}
	return ""
}

func init() {
	proto.RegisterType((*MsgCreateAutoLP)(nil), "maany.autolp.v1.MsgCreateAutoLP")
	proto.RegisterType((*MsgCreateAutoLPResponse)(nil), "maany.autolp.v1.MsgCreateAutoLPResponse")
	proto.RegisterType((*MsgRegisterICA)(nil), "maany.autolp.v1.MsgRegisterICA")
	proto.RegisterType((*MsgRegisterICAResponse)(nil), "maany.autolp.v1.MsgRegisterICAResponse")
	proto.RegisterType((*MsgSubmitICATx)(nil), "maany.autolp.v1.MsgSubmitICATx")
	proto.RegisterType((*MsgSubmitICATxResponse)(nil), "maany.autolp.v1.MsgSubmitICATxResponse")
}

func init() { proto.RegisterFile("maany/autolp/v1/tx.proto", fileDescriptor_f8eff3e612e6fd8e) }

var fileDescriptor_f8eff3e612e6fd8e = []byte{
	// 726 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x95, 0xc1, 0x6f, 0xd3, 0x3a,
	0x1c, 0xc7, 0x9b, 0xae, 0xeb, 0xde, 0xdc, 0xbd, 0xf5, 0x29, 0x6f, 0x6f, 0xcb, 0xaa, 0x47, 0xdb,
	0x95, 0xc3, 0xca, 0xa4, 0x39, 0x6a, 0x91, 0x40, 0xda, 0xad, 0xeb, 0x01, 0x55, 0x62, 0x62, 0xca,
	0x90, 0x90, 0x76, 0xa9, 0x1c, 0xc7, 0x4b, 0x2d, 0x2d, 0x76, 0x88, 0x9d, 0xaa, 0xe5, 0x84, 0x38,
	0x20, 0x8e, 0x9c, 0x39, 0xed, 0x4f, 0xd8, 0x85, 0xff, 0x61, 0xc7, 0xdd, 0xe0, 0x84, 0xd0, 0x76,
	0x18, 0x7f, 0x06, 0x8a, 0x93, 0xac, 0x69, 0x55, 0x18, 0x17, 0xc4, 0xcd, 0xfe, 0xfe, 0xbe, 0xfe,
	0xc5, 0xfe, 0xe4, 0xeb, 0x04, 0x18, 0x1e, 0x42, 0x6c, 0x6c, 0xa2, 0x50, 0xf2, 0x53, 0xdf, 0x1c,
	0xb6, 0x4c, 0x39, 0x82, 0x7e, 0xc0, 0x25, 0xd7, 0xcb, 0xaa, 0x02, 0xe3, 0x0a, 0x1c, 0xb6, 0x2a,
	0x55, 0xcc, 0x85, 0xc7, 0x85, 0x69, 0x23, 0x41, 0xcc, 0x61, 0xcb, 0x26, 0x12, 0xb5, 0x4c, 0xcc,
	0x29, 0x8b, 0x17, 0x54, 0x36, 0x92, 0xba, 0x27, 0xdc, 0xa8, 0x91, 0x27, 0xdc, 0xa4, 0xb0, 0xe6,
	0x72, 0x97, 0xab, 0xa1, 0x19, 0x8d, 0x12, 0x75, 0xd3, 0xe5, 0xdc, 0x3d, 0x25, 0xa6, 0x9a, 0xd9,
	0xe1, 0x89, 0x19, 0x3d, 0x2d, 0x2e, 0x6d, 0x51, 0x1b, 0x9b, 0x98, 0x07, 0xc4, 0xc4, 0x03, 0xc4,
	0x18, 0x39, 0x8d, 0xfa, 0x25, 0xc3, 0xd8, 0xd2, 0xf8, 0x98, 0x07, 0xe5, 0x03, 0xe1, 0x76, 0x03,
	0x82, 0x24, 0xe9, 0x84, 0x92, 0x3f, 0x3d, 0xd4, 0xb7, 0xc0, 0xca, 0x49, 0xc0, 0xbd, 0x3e, 0x72,
	0x9c, 0x80, 0x08, 0x61, 0x68, 0x75, 0xad, 0xb9, 0x6c, 0x95, 0x22, 0xad, 0x13, 0x4b, 0xfa, 0x7d,
	0xf0, 0x37, 0xe6, 0x8c, 0x11, 0x2c, 0x29, 0x67, 0x7d, 0xea, 0x18, 0x79, 0xe5, 0x59, 0x99, 0x88,
	0x3d, 0x47, 0x6f, 0x83, 0xff, 0x28, 0x93, 0x24, 0xc0, 0x03, 0x44, 0x59, 0x1f, 0x61, 0xcc, 0x43,
	0x26, 0x23, 0xf3, 0x82, 0x32, 0xff, 0x3b, 0x29, 0x76, 0xe2, 0x5a, 0xcf, 0xd1, 0x1f, 0x80, 0x7f,
	0x64, 0x80, 0x98, 0x38, 0x21, 0x41, 0x3f, 0xd9, 0xa9, 0x51, 0x50, 0xf6, 0x72, 0xaa, 0x77, 0x63,
	0x59, 0x7f, 0x0c, 0x8a, 0xc8, 0x8b, 0x96, 0x19, 0x8b, 0x75, 0xad, 0x59, 0x6a, 0x6f, 0xc2, 0x18,
	0x1c, 0x8c, 0xc0, 0xc2, 0x04, 0x2c, 0xec, 0x72, 0xca, 0xf6, 0x0b, 0x17, 0x5f, 0x6a, 0x39, 0x2b,
	0xb1, 0xeb, 0xdb, 0xa0, 0x2c, 0xa9, 0x47, 0x78, 0x28, 0xfb, 0x82, 0x60, 0xce, 0x1c, 0x61, 0x14,
	0xeb, 0x5a, 0xb3, 0x60, 0xad, 0x26, 0xf2, 0x51, 0xac, 0xee, 0x6d, 0xbe, 0x3b, 0xab, 0xe5, 0xbe,
	0x9d, 0xd5, 0x72, 0x6f, 0x6e, 0xce, 0x77, 0xa6, 0x98, 0x34, 0x42, 0xb0, 0x31, 0x83, 0xcd, 0x22,
	0xc2, 0xe7, 0x4c, 0x10, 0xbd, 0x06, 0x4a, 0x14, 0xa3, 0x19, 0x7a, 0x80, 0x62, 0x94, 0xc2, 0xab,
	0x81, 0x92, 0x20, 0x2f, 0x43, 0xc2, 0x30, 0x49, 0xd1, 0x15, 0x2c, 0x90, 0x4a, 0x3d, 0x47, 0x37,
	0xc0, 0x52, 0x7a, 0xf6, 0x18, 0x55, 0x3a, 0x6d, 0x7c, 0xd2, 0xc0, 0xea, 0x81, 0x70, 0x2d, 0xe2,
	0x52, 0x21, 0x49, 0xd0, 0xeb, 0x76, 0xf4, 0xff, 0xc1, 0x32, 0x0a, 0xe5, 0x80, 0x07, 0x54, 0x8e,
	0x93, 0x87, 0x4d, 0x84, 0xdf, 0xf7, 0xa2, 0x1e, 0x81, 0xbf, 0x78, 0xe0, 0x90, 0x80, 0x32, 0x57,
	0xbd, 0xa0, 0xd5, 0x76, 0x05, 0x52, 0x1b, 0xc3, 0x28, 0x6e, 0x30, 0xcd, 0xd8, 0xb0, 0x05, 0x9f,
	0x45, 0x26, 0xeb, 0xd6, 0xbb, 0xb7, 0x9e, 0x65, 0x3a, 0xd9, 0x68, 0xe3, 0x10, 0xac, 0x4f, 0x1f,
	0xec, 0x96, 0xe7, 0x3d, 0x00, 0x92, 0x7e, 0xd1, 0x96, 0x92, 0x13, 0x26, 0x4a, 0xcf, 0xd1, 0x37,
	0xc0, 0x92, 0xcf, 0x03, 0x39, 0x39, 0x5b, 0x31, 0x9a, 0xf6, 0x9c, 0xc6, 0xdb, 0xbc, 0x62, 0x75,
	0x14, 0xda, 0x1e, 0x95, 0xbd, 0x6e, 0xe7, 0xf9, 0xe8, 0x4f, 0xb1, 0x6a, 0x82, 0x82, 0x27, 0x5c,
	0x61, 0x14, 0xea, 0x0b, 0xcd, 0x52, 0x7b, 0x0d, 0xc6, 0x37, 0x16, 0xa6, 0x37, 0x16, 0x76, 0xd8,
	0xd8, 0x52, 0x0e, 0x5d, 0x07, 0x05, 0x8f, 0x78, 0x5c, 0x25, 0x7a, 0xd9, 0x52, 0xe3, 0x5f, 0x8f,
	0xeb, 0x8f, 0xd0, 0x1e, 0x29, 0xb4, 0x19, 0x0e, 0xd9, 0xa8, 0x66, 0x93, 0xa8, 0xfd, 0x2c, 0x89,
	0xf9, 0xa9, 0x24, 0xb6, 0x3f, 0xe4, 0xc1, 0xc2, 0x81, 0x70, 0xf5, 0x63, 0xb0, 0x32, 0xf5, 0xf1,
	0xa8, 0xc3, 0x99, 0xef, 0x1d, 0x9c, 0xb9, 0x27, 0x95, 0xe6, 0x5d, 0x8e, 0xdb, 0xed, 0xbd, 0x00,
	0xa5, 0x6c, 0xd2, 0x6b, 0xf3, 0x16, 0x66, 0x0c, 0x95, 0xed, 0x3b, 0x0c, 0xd9, 0xc6, 0xd9, 0x58,
	0xcc, 0x6d, 0x9c, 0x31, 0xcc, 0x6f, 0x3c, 0x07, 0x68, 0x65, 0xf1, 0xf5, 0xcd, 0xf9, 0x8e, 0xb6,
	0xff, 0xe4, 0xe2, 0xaa, 0xaa, 0x5d, 0x5e, 0x55, 0xb5, 0xaf, 0x57, 0x55, 0xed, 0xfd, 0x75, 0x35,
	0x77, 0x79, 0x5d, 0xcd, 0x7d, 0xbe, 0xae, 0xe6, 0x8e, 0x77, 0x5d, 0x2a, 0x07, 0xa1, 0x0d, 0x31,
	0xf7, 0x4c, 0xd5, 0x73, 0x77, 0x34, 0x7e, 0x95, 0x8c, 0x90, 0xef, 0x9b, 0xa3, 0xf4, 0x17, 0x22,
	0xc7, 0x3e, 0x11, 0x76, 0x51, 0x65, 0xe4, 0xe1, 0xf7, 0x00, 0x00, 0x00, 0xff, 0xff, 0xe7, 0x95,
	0x81, 0x7e, 0x5f, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// CreateAutoLP funds an ICA on the DEX chain via ICS-20.
	CreateAutoLP(ctx context.Context, in *MsgCreateAutoLP, opts ...grpc.CallOption) (*MsgCreateAutoLPResponse, error)
	// RegisterICA creates an ICA controller channel to the DEX chain.
	RegisterICA(ctx context.Context, in *MsgRegisterICA, opts ...grpc.CallOption) (*MsgRegisterICAResponse, error)
	// SubmitICATx submits protobuf Any messages to be executed by the ICA on the DEX.
	SubmitICATx(ctx context.Context, in *MsgSubmitICATx, opts ...grpc.CallOption) (*MsgSubmitICATxResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) CreateAutoLP(ctx context.Context, in *MsgCreateAutoLP, opts ...grpc.CallOption) (*MsgCreateAutoLPResponse, error) {
	out := new(MsgCreateAutoLPResponse)
	err := c.cc.Invoke(ctx, "/maany.autolp.v1.Msg/CreateAutoLP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RegisterICA(ctx context.Context, in *MsgRegisterICA, opts ...grpc.CallOption) (*MsgRegisterICAResponse, error) {
	out := new(MsgRegisterICAResponse)
	err := c.cc.Invoke(ctx, "/maany.autolp.v1.Msg/RegisterICA", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SubmitICATx(ctx context.Context, in *MsgSubmitICATx, opts ...grpc.CallOption) (*MsgSubmitICATxResponse, error) {
	out := new(MsgSubmitICATxResponse)
	err := c.cc.Invoke(ctx, "/maany.autolp.v1.Msg/SubmitICATx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// CreateAutoLP funds an ICA on the DEX chain via ICS-20.
	CreateAutoLP(context.Context, *MsgCreateAutoLP) (*MsgCreateAutoLPResponse, error)
	// RegisterICA creates an ICA controller channel to the DEX chain.
	RegisterICA(context.Context, *MsgRegisterICA) (*MsgRegisterICAResponse, error)
	// SubmitICATx submits protobuf Any messages to be executed by the ICA on the DEX.
	SubmitICATx(context.Context, *MsgSubmitICATx) (*MsgSubmitICATxResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) CreateAutoLP(ctx context.Context, req *MsgCreateAutoLP) (*MsgCreateAutoLPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAutoLP not implemented")
}
func (*UnimplementedMsgServer) RegisterICA(ctx context.Context, req *MsgRegisterICA) (*MsgRegisterICAResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterICA not implemented")
}
func (*UnimplementedMsgServer) SubmitICATx(ctx context.Context, req *MsgSubmitICATx) (*MsgSubmitICATxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitICATx not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_CreateAutoLP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateAutoLP)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateAutoLP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/maany.autolp.v1.Msg/CreateAutoLP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateAutoLP(ctx, req.(*MsgCreateAutoLP))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RegisterICA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRegisterICA)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RegisterICA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/maany.autolp.v1.Msg/RegisterICA",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RegisterICA(ctx, req.(*MsgRegisterICA))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SubmitICATx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSubmitICATx)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SubmitICATx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/maany.autolp.v1.Msg/SubmitICATx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SubmitICATx(ctx, req.(*MsgSubmitICATx))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "maany.autolp.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAutoLP",
			Handler:    _Msg_CreateAutoLP_Handler,
		},
		{
			MethodName: "RegisterICA",
			Handler:    _Msg_RegisterICA_Handler,
		},
		{
			MethodName: "SubmitICATx",
			Handler:    _Msg_SubmitICATx_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "maany/autolp/v1/tx.proto",
}

func (m *MsgCreateAutoLP) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateAutoLP) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateAutoLP) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TimeoutSeconds != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.TimeoutSeconds))
		i--
		dAtA[i] = 0x30
	}
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if len(m.TransferChannel) > 0 {
		i -= len(m.TransferChannel)
		copy(dAtA[i:], m.TransferChannel)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TransferChannel)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.InterchainAccountId) > 0 {
		i -= len(m.InterchainAccountId)
		copy(dAtA[i:], m.InterchainAccountId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.InterchainAccountId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ConnectionId) > 0 {
		i -= len(m.ConnectionId)
		copy(dAtA[i:], m.ConnectionId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ConnectionId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.FromAddress) > 0 {
		i -= len(m.FromAddress)
		copy(dAtA[i:], m.FromAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FromAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateAutoLPResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateAutoLPResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateAutoLPResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Channel) > 0 {
		i -= len(m.Channel)
		copy(dAtA[i:], m.Channel)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Channel)))
		i--
		dAtA[i] = 0x1a
	}
	if m.SequenceId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.SequenceId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.IcaAddress) > 0 {
		i -= len(m.IcaAddress)
		copy(dAtA[i:], m.IcaAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.IcaAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRegisterICA) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterICA) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterICA) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Ordering != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Ordering))
		i--
		dAtA[i] = 0x20
	}
	if len(m.InterchainAccountId) > 0 {
		i -= len(m.InterchainAccountId)
		copy(dAtA[i:], m.InterchainAccountId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.InterchainAccountId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ConnectionId) > 0 {
		i -= len(m.ConnectionId)
		copy(dAtA[i:], m.ConnectionId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ConnectionId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRegisterICAResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterICAResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterICAResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PortId) > 0 {
		i -= len(m.PortId)
		copy(dAtA[i:], m.PortId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.PortId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ChannelId) > 0 {
		i -= len(m.ChannelId)
		copy(dAtA[i:], m.ChannelId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ChannelId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSubmitICATx) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSubmitICATx) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSubmitICATx) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TimeoutSeconds != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.TimeoutSeconds))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Memo) > 0 {
		i -= len(m.Memo)
		copy(dAtA[i:], m.Memo)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Memo)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Msgs) > 0 {
		for iNdEx := len(m.Msgs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Msgs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.InterchainAccountId) > 0 {
		i -= len(m.InterchainAccountId)
		copy(dAtA[i:], m.InterchainAccountId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.InterchainAccountId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ConnectionId) > 0 {
		i -= len(m.ConnectionId)
		copy(dAtA[i:], m.ConnectionId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ConnectionId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSubmitICATxResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSubmitICATxResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSubmitICATxResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Channel) > 0 {
		i -= len(m.Channel)
		copy(dAtA[i:], m.Channel)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Channel)))
		i--
		dAtA[i] = 0x12
	}
	if m.SequenceId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.SequenceId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgCreateAutoLP) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FromAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ConnectionId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.InterchainAccountId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TransferChannel)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovTx(uint64(l))
	if m.TimeoutSeconds != 0 {
		n += 1 + sovTx(uint64(m.TimeoutSeconds))
	}
	return n
}

func (m *MsgCreateAutoLPResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.IcaAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.SequenceId != 0 {
		n += 1 + sovTx(uint64(m.SequenceId))
	}
	l = len(m.Channel)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgRegisterICA) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ConnectionId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.InterchainAccountId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Ordering != 0 {
		n += 1 + sovTx(uint64(m.Ordering))
	}
	return n
}

func (m *MsgRegisterICAResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChannelId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.PortId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSubmitICATx) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ConnectionId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.InterchainAccountId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Msgs) > 0 {
		for _, e := range m.Msgs {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	l = len(m.Memo)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.TimeoutSeconds != 0 {
		n += 1 + sovTx(uint64(m.TimeoutSeconds))
	}
	return n
}

func (m *MsgSubmitICATxResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SequenceId != 0 {
		n += 1 + sovTx(uint64(m.SequenceId))
	}
	l = len(m.Channel)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgCreateAutoLP) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateAutoLP: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateAutoLP: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InterchainAccountId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InterchainAccountId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransferChannel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TransferChannel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeoutSeconds", wireType)
			}
			m.TimeoutSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeoutSeconds |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateAutoLPResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateAutoLPResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateAutoLPResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IcaAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IcaAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SequenceId", wireType)
			}
			m.SequenceId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SequenceId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Channel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRegisterICA) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterICA: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterICA: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InterchainAccountId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InterchainAccountId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ordering", wireType)
			}
			m.Ordering = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ordering |= types1.Order(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRegisterICAResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterICAResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterICAResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChannelId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PortId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSubmitICATx) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSubmitICATx: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSubmitICATx: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InterchainAccountId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InterchainAccountId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msgs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msgs = append(m.Msgs, &types2.Any{})
			if err := m.Msgs[len(m.Msgs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Memo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Memo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeoutSeconds", wireType)
			}
			m.TimeoutSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeoutSeconds |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSubmitICATxResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSubmitICATxResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSubmitICATxResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SequenceId", wireType)
			}
			m.SequenceId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SequenceId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Channel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
