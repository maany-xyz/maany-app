syntax = "proto3";

package maany.autolp.v1;

import "cosmos/base/v1beta1/coin.proto";
import "cosmos/msg/v1/msg.proto";
import "gogoproto/gogo.proto";
import "google/protobuf/any.proto";
import "ibc/core/channel/v1/channel.proto";

option go_package = "github.com/maany-xyz/maany-app/x/autolp/types";

// Msg defines the autolp Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;

  // CreateAutoLP funds an ICA on the DEX chain via ICS-20.
  rpc CreateAutoLP(MsgCreateAutoLP) returns (MsgCreateAutoLPResponse);

  // RegisterICA creates an ICA controller channel to the DEX chain.
  rpc RegisterICA(MsgRegisterICA) returns (MsgRegisterICAResponse);

  // SubmitICATx submits protobuf Any messages to be executed by the ICA on the DEX.
  rpc SubmitICATx(MsgSubmitICATx) returns (MsgSubmitICATxResponse);
}

message MsgCreateAutoLP {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;
  option (cosmos.msg.v1.signer) = "from_address";

  // Controller chain signer.
  string from_address = 1;

  // IBC connection to the DEX chain.
  string connection_id = 2;

  // Local identifier for the interchain account owned by from_address.
  string interchain_account_id = 3;

  // ICS-20 channel on the controller chain to reach the DEX.
  string transfer_channel = 4;

  // Amount to send to the ICA address on the DEX.
  cosmos.base.v1beta1.Coin amount = 5 [(gogoproto.nullable) = false];

  // Timeout in seconds for the ICS-20 transfer.
  uint64 timeout_seconds = 6;
}

message MsgCreateAutoLPResponse {
  // The resolved ICA address on the DEX chain.
  string ica_address = 1;
  // Outgoing packet sequence on the transfer channel.
  uint64 sequence_id = 2;
  // Transfer channel used on controller side.
  string channel = 3;
}

// MsgRegisterICA registers an interchain account over an existing IBC connection.
message MsgRegisterICA {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;
  option (cosmos.msg.v1.signer) = "authority";

  // Authority that controls autolp ICA logic (e.g. gov/admin module address).
  string authority = 1;
  // IBC connection ID to the DEX chain.
  string connection_id = 2;
  // Local identifier for this ICA within autolp.
  string interchain_account_id = 3;
  // ORDERED/UNORDERED (ORDERED is standard for ICA).
  ibc.core.channel.v1.Order ordering = 4;
}

message MsgRegisterICAResponse {
  string channel_id = 1;
  string port_id = 2;
}

// MsgSubmitICATx submits one or more messages for the ICA to execute on host chain.
message MsgSubmitICATx {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;
  option (cosmos.msg.v1.signer) = "authority";

  string authority = 1;
  string connection_id = 2;
  string interchain_account_id = 3;
  // Any-encoded host chain messages (e.g., Osmosis gamm messages).
  repeated google.protobuf.Any msgs = 4;
  string memo = 5;
  uint64 timeout_seconds = 6;
}

message MsgSubmitICATxResponse {
  uint64 sequence_id = 1;
  string channel = 2;
}
